syntax = "proto3";

message register { // from client to server
    string timestamp = 1; // always equal in length
    
    int32 sequence_num = 2;
    
    int32 function_len = 3;
    string function_name = 4;
    
    int32 username_len = 5;
    string username = 6;

    int32 email_len = 7;
    string email = 8;

    int32 passwd_len = 9;
    string password = 10; 
    
    /*
    returns int32
    ret 0 --> Successfully registered the user
    ret 1 --> Not a valid email
    ret 2 --> Email already Taken
    ret 3 --> Password length is not greater that 12
    */
}

message login { // from client to server
    string timestamp = 1; // always equal in length
    
    int32 sequence_num = 2;

    int32 function_len = 3;
    string function_name = 4;

    int32 username_len = 5;
    string username = 6;

    int32 passwd_len = 7;
    string password = 8;
    
    /*
    returns int32
    ret 0 --> Successfuly logged in
    ret 1 --> User not found
    ret 2 --> Incorrect password
    */
}

message viewSubscription{ // from client to server
    string timestamp = 1; // always equal in length
    
    int32 sequence_num = 2;
    
    int32 function_len = 3;
    string function_name = 4;

    /*
    returns int32
    ret N --> N is the number of credits left in the subscription
    */
}

message createVM { // from client to server
    string timestamp = 1; // always equal in length
    
    int32 sequence_num = 2;

    int32 function_len = 3;
    string function_name = 4;

    int32 vmname_len = 5;
    string vmname = 6;

    int32 tag_len = 7;
    string tag = 8;
    
    /*
    returns int32
    ret 0 --> Successfully created the VM
    ret 1 --> VM with the tag already present
    ret 2 --> Insufficient funds in the subscription to spawn a VM
    */
}

message RuleAddTCP { // from client to server
    string timestamp = 1; // always equal in length
    
    int32 sequence_num = 2;

    int32 function_len = 3;
    string function_name = 4;

    int32 vmtag_len = 5;
    string vmtag = 6;
    
    int32 port = 7;
    int32 status = 8; // 0 to add ;-; and 1 to close 
    /*
    returns int32
    ret 0 --> Successfully Opened/Closed the port
    ret 1 --> Port already opened/closed
    ret 2 --> VM Not found with the given tag
    */
}

message RuleAddUDP { // from client to server
    string timestamp = 1; // always equal in length
    
    int32 sequence_num = 2;

    int32 function_len = 3;
    string function_name = 4;

    int32 vmtag_len = 5;
    string vmtag = 6;

    int32 port = 7;
    int32 status = 8; // 0 to add ;-; and 1 to close 
    /*
    returns int32
    ret 0 --> Successfully Opened/Closed the port
    ret 1 --> Port already opened/closed
    ret 2 --> VM Not found with the given tag
    */
}

message UpScaleRAM { // from client to server
    string timestamp = 1; // always equal in length
    
    int32 sequence_num = 2;

    int32 function_len = 3;
    string function_name = 4;

    int32 vmtag_len = 5;
    string vmtag = 6;

    int32 ramcount = 7;
    /*
    returns int32
    ret 0 --> Successfully added the required RAM
    ret 1 --> Insufficient funds in the subscription
    ret 2 --> VM with the given tag not found
    */
}

message DownScaleRAM { // from client to server
    string timestamp = 1; // always equal in length
    
    int32 sequence_num = 2;

    int32 function_len = 3;
    string function_name = 4;

    int32 vmtag_len = 5;
    string vmtag = 6;

    int32 ramcount = 7;
    /*
    returns int32
    ret 0 --> Successfully downscaled the VM by removing the RAM Count given
    ret 1 --> VM Already at the minimum RAM count
    ret 2 --> VM with the given tag not found
    */
}

message UpScaleCPU { // from client to server
    string timestamp = 1; // always equal in length
    
    int32 sequence_num = 2;

    int32 function_len = 3;
    string function_name = 4;

    int32 vmtag_len = 5;
    string vmtag = 6;

    int32 cpucount = 7;
    /*
    returns int32
    ret 0 --> Successfully added the given CPU count
    ret 1 --> Insufficient funds in the subscription
    ret 2 --> VM with the given tag not found
    */
}

message DownScaleCPU { // from client to server
    string timestamp = 1; // always equal in length
    
    int32 sequence_num = 2;

    int32 function_len = 3;
    string function_name = 4;

    int32 vmtag_len = 5;
    string vmtag = 6;

    int32 cpucount = 7;
    /*
    returns int32
    ret 0 --> Successfully downscaled the VM by removing the given number of CPUs
    ret 1 --> VM Already at the minimum CPU count
    ret 2 --> VM with the given tag not found
    */
}

message DeleteVM { // from client to server
    string timestamp = 1; // always equal in length
    
    int32 sequence_num = 2;

    int32 function_len = 3;
    string function_name = 4;

    int32 vmtag_len = 5;
    string vmtag = 6;
    /*
    returns int32
    ret 0 --> Successfully deleted the VM
    ret 1 --> VM with the given tag not found
    */
}

message StatusVM { // from client to server
    int32 timestamp = 1;

    int32 sequence_num = 2;

    int32 function_len = 3;
    string function_name = 4;

    int32 vmtag_len = 5;
    string vmtag = 6;
    
    /*
    returns a parsed string with all the VM stats and the client will print that.
    this is the function where the packet manipulation bug can be triggered since the client will print the direct output of the function that is called.
    */
}

message ListAllMyVMs {
    int32 timestamp = 1;

    int32 sequence_num = 2;

    int32 function_len = 3;
    string function_name = 4;

    /*
    returns a bunch of datatypes
    int32 A; A is the Number of VMs
    Loop in A
        1) int32 B length of VM tag
        2) string of length B (VM Tag)
        3) int32 C length of VM Name
        4) string of length C (VM Name)
        
        5) int32 D - number of cores
        6) int32 E - GB count of RAM
        7) int32 F - number of TCP ports open
        Loop in F
            a) int32 H - value of TCP port
        
        8) int32 G - number of UDP ports open
        Loop in G
            a) int32 I - value of the UDP port
        
    */
}