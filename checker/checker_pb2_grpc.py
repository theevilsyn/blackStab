# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import checker_pb2 as checker__pb2


class CheckerStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PlantFlag = channel.unary_unary(
                '/checker.Checker/PlantFlag',
                request_serializer=checker__pb2.FlagRequest.SerializeToString,
                response_deserializer=checker__pb2.FlagResponse.FromString,
                )
        self.CheckService = channel.unary_unary(
                '/checker.Checker/CheckService',
                request_serializer=checker__pb2.CheckRequest.SerializeToString,
                response_deserializer=checker__pb2.ServiceState.FromString,
                )


class CheckerServicer(object):
    """Missing associated documentation comment in .proto file"""

    def PlantFlag(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckService(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CheckerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PlantFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.PlantFlag,
                    request_deserializer=checker__pb2.FlagRequest.FromString,
                    response_serializer=checker__pb2.FlagResponse.SerializeToString,
            ),
            'CheckService': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckService,
                    request_deserializer=checker__pb2.CheckRequest.FromString,
                    response_serializer=checker__pb2.ServiceState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'checker.Checker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Checker(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def PlantFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/checker.Checker/PlantFlag',
            checker__pb2.FlagRequest.SerializeToString,
            checker__pb2.FlagResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/checker.Checker/CheckService',
            checker__pb2.CheckRequest.SerializeToString,
            checker__pb2.ServiceState.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
