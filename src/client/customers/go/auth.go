package main

import (
	"crypto/x509"
	"encoding/base64"
	"encoding/pem"
	"fmt"
	"math/big"
	"net"
	"os"
)

func clientauth(conn net.Conn) {
	masala := []byte{55, 55, 55, 55, 55, 66, 95, 89, 91, 86, 32, 82, 109, 67, 32, 80, 82, 91, 110, 67, 108, 95, 32, 85, 95, 107, 55, 55, 55, 55, 55, 26, 87, 91, 91, 95, 112, 121, 91, 66, 67, 67, 85, 93, 67, 83, 95, 67, 139, 50, 85, 50, 108, 110, 122, 125, 109, 124, 115, 104, 115, 106, 53, 123, 81, 140, 67, 111, 99, 119, 83, 127, 104, 112, 126, 120, 105, 98, 121, 51, 67, 108, 94, 83, 79, 136, 113, 89, 99, 77, 142, 83, 84, 95, 139, 92, 26, 118, 79, 50, 141, 123, 142, 124, 125, 118, 107, 127, 79, 53, 73, 86, 92, 105, 124, 82, 75, 111, 104, 83, 88, 90, 78, 73, 91, 139, 93, 115, 142, 78, 90, 72, 119, 138, 110, 77, 66, 66, 95, 81, 112, 99, 49, 125, 75, 94, 81, 85, 84, 127, 138, 104, 115, 79, 115, 123, 138, 124, 108, 120, 48, 26, 105, 104, 67, 114, 79, 110, 87, 78, 91, 110, 126, 81, 104, 106, 112, 53, 79, 90, 119, 120, 90, 83, 72, 89, 122, 138, 120, 72, 118, 124, 116, 80, 93, 90, 50, 53, 53, 115, 86, 79, 138, 90, 119, 143, 93, 113, 94, 138, 118, 83, 105, 50, 89, 107, 75, 95, 84, 76, 111, 50, 67, 113, 82, 99, 26, 108, 139, 112, 67, 53, 116, 105, 91, 126, 143, 66, 123, 92, 86, 116, 119, 127, 81, 84, 79, 116, 72, 80, 116, 125, 85, 84, 123, 95, 99, 85, 99, 112, 142, 114, 126, 118, 139, 115, 86, 141, 93, 117, 126, 127, 112, 140, 104, 125, 137, 113, 72, 82, 120, 82, 91, 125, 120, 119, 95, 125, 120, 112, 83, 26, 87, 110, 126, 99, 112, 126, 48, 51, 116, 66, 94, 124, 126, 49, 104, 86, 84, 81, 109, 137, 121, 85, 109, 109, 76, 108, 48, 105, 91, 89, 80, 116, 126, 138, 110, 79, 48, 66, 79, 114, 91, 122, 51, 136, 80, 90, 73, 116, 98, 73, 82, 106, 98, 136, 99, 118, 139, 126, 124, 95, 73, 51, 95, 111, 26, 140, 80, 120, 115, 140, 88, 98, 123, 49, 66, 67, 79, 108, 136, 124, 78, 91, 51, 83, 104, 120, 84, 110, 76, 87, 88, 86, 105, 122, 105, 120, 106, 48, 121, 85, 75, 136, 83, 91, 92, 67, 83, 67, 66, 67, 113, 91, 66, 67, 83, 93, 50, 115, 88, 78, 116, 110, 91, 114, 139, 76, 82, 123, 107, 26, 82, 92, 49, 95, 112, 120, 49, 80, 140, 80, 73, 79, 107, 110, 113, 88, 76, 72, 88, 119, 137, 117, 50, 137, 104, 75, 111, 113, 84, 140, 121, 51, 95, 84, 115, 124, 104, 110, 83, 99, 141, 122, 94, 66, 107, 109, 107, 86, 67, 105, 67, 106, 123, 136, 98, 90, 111, 118, 111, 123, 116, 88, 138, 85, 26, 89, 94, 136, 88, 120, 84, 127, 115, 124, 81, 114, 119, 111, 76, 107, 109, 78, 141, 99, 50, 142, 83, 125, 98, 114, 114, 78, 78, 108, 83, 82, 143, 76, 92, 98, 81, 90, 95, 119, 118, 53, 105, 117, 106, 122, 81, 136, 80, 125, 88, 86, 85, 66, 136, 127, 87, 105, 141, 83, 49, 105, 92, 88, 93, 26, 78, 127, 116, 114, 93, 106, 92, 75, 86, 94, 121, 140, 67, 116, 67, 119, 85, 48, 93, 108, 76, 137, 72, 78, 83, 111, 115, 136, 123, 111, 143, 127, 118, 50, 72, 72, 79, 122, 53, 49, 119, 81, 89, 72, 67, 125, 118, 94, 138, 124, 85, 139, 93, 79, 83, 91, 116, 99, 113, 77, 78, 119, 83, 104, 26, 81, 126, 73, 83, 114, 123, 137, 104, 106, 142, 104, 121, 114, 67, 81, 123, 98, 125, 108, 140, 127, 98, 89, 119, 115, 81, 88, 51, 98, 111, 87, 75, 105, 51, 75, 123, 123, 78, 75, 66, 140, 85, 67, 67, 110, 106, 72, 73, 115, 76, 125, 50, 116, 49, 124, 125, 124, 87, 92, 124, 105, 88, 48, 139, 26, 85, 126, 142, 91, 124, 136, 107, 88, 48, 73, 53, 139, 90, 50, 138, 80, 140, 95, 127, 49, 119, 114, 66, 112, 87, 98, 82, 83, 126, 113, 119, 104, 111, 121, 104, 91, 88, 107, 53, 126, 116, 127, 118, 136, 119, 122, 142, 114, 95, 137, 87, 72, 138, 140, 83, 136, 112, 136, 143, 78, 109, 104, 113, 104, 26, 79, 93, 95, 77, 110, 136, 107, 66, 67, 113, 89, 66, 67, 80, 137, 72, 49, 112, 82, 125, 120, 83, 119, 83, 121, 111, 53, 72, 82, 90, 87, 85, 113, 82, 72, 99, 95, 113, 78, 113, 98, 138, 109, 110, 142, 92, 142, 80, 114, 143, 113, 122, 123, 123, 79, 105, 122, 98, 99, 88, 106, 99, 86, 120, 26, 89, 107, 107, 86, 124, 82, 85, 75, 95, 105, 106, 85, 88, 136, 88, 104, 124, 49, 88, 93, 138, 105, 92, 124, 83, 89, 123, 117, 106, 51, 115, 112, 98, 67, 67, 95, 123, 138, 79, 85, 86, 90, 83, 140, 104, 115, 81, 118, 106, 78, 124, 109, 107, 93, 82, 86, 95, 106, 123, 95, 113, 116, 142, 49, 26, 127, 140, 78, 138, 81, 140, 127, 80, 90, 121, 124, 123, 87, 105, 94, 112, 142, 98, 142, 111, 67, 119, 138, 51, 50, 94, 78, 88, 114, 141, 94, 53, 114, 138, 75, 117, 73, 84, 49, 67, 89, 112, 118, 51, 115, 79, 123, 111, 73, 139, 110, 143, 88, 99, 49, 66, 67, 113, 89, 66, 67, 87, 79, 114, 26, 86, 84, 118, 116, 49, 106, 73, 127, 142, 76, 118, 117, 94, 72, 66, 116, 125, 138, 89, 72, 118, 80, 141, 108, 87, 112, 48, 127, 126, 109, 89, 79, 93, 120, 51, 50, 50, 108, 77, 92, 119, 120, 80, 86, 66, 113, 82, 116, 126, 112, 78, 98, 125, 107, 50, 67, 104, 142, 110, 118, 138, 122, 121, 48, 26, 113, 137, 49, 93, 107, 94, 109, 111, 76, 117, 109, 99, 111, 123, 92, 66, 141, 77, 143, 82, 72, 84, 80, 143, 110, 139, 119, 99, 73, 94, 138, 137, 113, 122, 86, 116, 84, 116, 117, 94, 140, 105, 82, 123, 87, 122, 82, 140, 118, 105, 76, 78, 83, 117, 108, 141, 92, 94, 78, 107, 78, 87, 79, 88, 26, 119, 80, 115, 136, 75, 88, 80, 127, 79, 139, 95, 109, 104, 112, 84, 91, 113, 94, 80, 87, 91, 110, 122, 125, 115, 82, 86, 78, 98, 87, 82, 140, 122, 83, 72, 50, 113, 121, 72, 94, 67, 113, 89, 66, 67, 87, 78, 95, 143, 121, 81, 85, 136, 84, 113, 109, 67, 89, 77, 123, 80, 110, 141, 81, 26, 136, 143, 93, 85, 88, 117, 143, 92, 93, 90, 118, 84, 82, 142, 108, 90, 117, 49, 84, 84, 78, 119, 111, 85, 90, 84, 117, 126, 118, 117, 77, 113, 83, 94, 127, 84, 109, 109, 94, 137, 126, 76, 66, 78, 123, 77, 119, 50, 85, 140, 82, 125, 112, 88, 73, 72, 106, 73, 88, 94, 127, 107, 89, 77, 26, 105, 110, 53, 123, 105, 87, 124, 94, 82, 117, 140, 108, 76, 122, 115, 118, 76, 78, 137, 82, 81, 49, 113, 72, 136, 77, 51, 109, 123, 137, 83, 73, 79, 141, 80, 108, 120, 137, 126, 99, 121, 117, 79, 116, 108, 80, 138, 143, 72, 90, 81, 85, 126, 49, 118, 115, 82, 79, 72, 81, 66, 92, 48, 111, 26, 116, 122, 81, 104, 110, 89, 127, 123, 136, 78, 108, 115, 123, 126, 106, 66, 99, 112, 83, 67, 51, 118, 119, 66, 67, 113, 89, 66, 67, 91, 99, 124, 143, 72, 95, 83, 117, 90, 113, 142, 83, 116, 85, 77, 67, 120, 106, 122, 95, 137, 92, 76, 140, 90, 127, 79, 85, 105, 108, 50, 91, 108, 48, 67, 26, 76, 53, 142, 98, 81, 117, 118, 120, 99, 118, 106, 88, 105, 51, 139, 48, 112, 93, 84, 122, 51, 81, 107, 118, 86, 125, 106, 140, 125, 92, 143, 80, 127, 94, 121, 115, 140, 76, 49, 136, 119, 85, 78, 87, 136, 125, 115, 49, 93, 95, 91, 115, 90, 137, 80, 136, 66, 73, 72, 89, 104, 127, 125, 143, 26, 140, 51, 117, 51, 80, 48, 123, 118, 82, 89, 123, 50, 72, 105, 73, 118, 118, 99, 126, 112, 84, 112, 99, 141, 85, 116, 108, 50, 53, 73, 139, 114, 108, 87, 111, 82, 117, 83, 78, 80, 78, 72, 80, 82, 115, 137, 81, 119, 53, 76, 121, 115, 140, 67, 109, 138, 137, 48, 67, 95, 141, 138, 90, 104, 26, 92, 76, 140, 67, 107, 127, 126, 82, 67, 113, 89, 66, 67, 81, 53, 78, 95, 104, 124, 123, 110, 107, 51, 123, 92, 114, 66, 119, 75, 86, 109, 121, 110, 75, 48, 83, 104, 110, 67, 51, 112, 76, 124, 141, 107, 107, 127, 84, 112, 92, 86, 79, 88, 72, 107, 115, 126, 121, 125, 90, 82, 110, 79, 81, 26, 123, 108, 121, 73, 104, 116, 106, 76, 118, 86, 53, 141, 110, 141, 113, 91, 88, 92, 143, 78, 98, 126, 49, 99, 113, 114, 143, 116, 95, 120, 127, 75, 87, 109, 108, 80, 121, 90, 125, 121, 99, 138, 107, 72, 118, 88, 53, 121, 95, 90, 87, 121, 87, 126, 80, 77, 112, 92, 118, 81, 109, 94, 121, 142, 26, 53, 85, 50, 76, 53, 119, 121, 89, 95, 140, 118, 116, 105, 107, 139, 138, 127, 115, 49, 53, 116, 98, 140, 127, 113, 77, 120, 136, 51, 106, 143, 49, 143, 104, 116, 66, 114, 94, 123, 92, 92, 121, 118, 139, 108, 118, 79, 139, 105, 105, 90, 99, 143, 109, 72, 80, 26, 55, 55, 55, 55, 55, 95, 86, 92, 32, 82, 109, 67, 32, 80, 82, 91, 110, 67, 108, 95, 32, 85, 95, 107, 55, 55, 55, 55, 55}
	for i := 0; i <= len(masala)-1; i++ {
		masala[i] = (masala[i] ^ 13) - 13
	}

	chlen := getresp(conn)
	challenge := recv(conn, chlen)
	der, _ := pem.Decode(masala)
	if der == nil {
		fmt.Println("No keys!!")
		os.Exit(-1)
	}

	privateKey, err := x509.ParsePKCS1PrivateKey(der.Bytes)
	if err != nil {
		fmt.Println("Something Went Wrong!!")
		os.Exit(-1)
	}

	cipherText, err := base64.StdEncoding.DecodeString(challenge)
	if err != nil {
		fmt.Println("Something Went Wrong!!")
		os.Exit(-1)
	}

	c := new(big.Int).SetBytes(cipherText)
	dec := c.Exp(c, privateKey.D, privateKey.N).Bytes()
	plainText := base64.StdEncoding.EncodeToString(dec[len(dec)-128:])
	sender := padint(len(plainText))
	sender += plainText
	send(conn, sender)
	resp := getresp(conn)
	if resp == 0 {
		fmt.Print()
	} else {
		fmt.Println("Authentication went wrong")
		os.Exit(-1)
	}
}
